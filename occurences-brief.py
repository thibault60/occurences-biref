import streamlit as st
import pandas as pd
from io import BytesIO
import re

# üìå Titre de l'application
st.title("üìä Consolidation Mot‚ÄëCl√© Principal + Occurrences (keywords only)")

st.markdown("""
**Mode d'emploi** :
1Ô∏è‚É£ T√©l√©versez un classeur **.xlsx** comportant **une feuille par cluster**.  
   ‚Ä¢ Les cellules **A5** et **B5** forment le *mot‚Äëcl√© principal* (ex. ¬´¬†eti¬†¬ª et ¬´¬†d√©finition¬†¬ª).  
   ‚Ä¢ Les mots‚Äëcl√©s secondaires peuvent √™tre dans n'importe quelle cellule, s√©par√©s par `|`.  
2Ô∏è‚É£ Cliquez sur **¬´¬†Fusionner & T√©l√©charger¬†¬ª**.  
3Ô∏è‚É£ Le fichier export√© contient **deux colonnes** :  
   ‚Ä¢ **Mot¬†Cl√©¬†Principal**  
   ‚Ä¢ **Occurrences** : uniquement des mots‚Äëcl√©s (texte), d√©dupliqu√©s, s√©par√©s par `¬†|¬†`.
""")

# ‚û°Ô∏è Import du fichier
xlsx_file = st.file_uploader("üìÇ Charger votre fichier Excel", type=["xlsx"])

# ‚û°Ô∏è Fonction utilitaire pour savoir si un token est purement num√©rique/pourcentage, etc.
def is_keyword(token: str) -> bool:
    # rejet si uniquement chiffres, espace ou ponctuation
    token_stripped = token.strip()
    if not token_stripped:
        return False
    # pattern nombre (entier ou d√©cimal) √©ventuellement suivi d'un %
    if re.fullmatch(r"[0-9]+([.,][0-9]+)?%?", token_stripped):
        return False
    return True

if xlsx_file and st.button("üöÄ Fusionner & T√©l√©charger"):
    try:
        sheets_dict = pd.read_excel(xlsx_file, sheet_name=None, header=None, engine="openpyxl")

        lignes = []
        for _, df in sheets_dict.items():
            # ---- Mot‚Äëcl√© principal ----
            try:
                mot_cle_principal = f"{df.iloc[4, 0]} {df.iloc[4, 1]}".strip()
            except Exception:
                mot_cle_principal = ""

            # ---- R√©cup√©ration & nettoyage des tokens ----
            tokens = []
            for cell in df.values.flatten():
                if pd.isna(cell):
                    continue
                for part in str(cell).split("|"):
                    part = part.strip()
                    if part and is_keyword(part):
                        tokens.append(part)

            if tokens:
                unique_tokens = list(dict.fromkeys(tokens))
                lignes.append({
                    "Mot Cl√© Principal": mot_cle_principal,
                    "Occurrences": " | ".join(unique_tokens)
                })

        if not lignes:
            st.warning("‚ö†Ô∏è Aucun mot‚Äëcl√© valide trouv√© dans le classeur.")
        else:
            result_df = pd.DataFrame(lignes, columns=["Mot Cl√© Principal", "Occurrences"])
            st.subheader("üîé Aper√ßu consolidation (keywords only)")
            st.dataframe(result_df, use_container_width=True, hide_index=True)

            # ---- Export en m√©moire ----
            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                result_df.to_excel(writer, sheet_name="Consolid√©", index=False, header=True)
            buffer.seek(0)

            st.download_button(
                label="üì• T√©l√©charger le XLSX consolid√©",
                data=buffer,
                file_name="motcles_consolides.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    except Exception as e:
        st.error(f"‚ùå Erreur : {e}")
